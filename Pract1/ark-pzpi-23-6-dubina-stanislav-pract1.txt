МІНІСТЕРСТВО ОСВІТИ І НАУКИ УКРАЇНИ
ХАРКІВСЬКИЙ НАЦІОНАЛЬНИЙ УНІВЕРСИТЕТ РАДІОЕЛЕКТРОНІКИ

ФАКУЛЬТЕТ КОМП’ЮТЕРНИХ НАУК
КАТЕДРА ПРОГРАМНОЇ ІНЖЕНЕРІЇ




ЗВІТ
до практичного завдання №1 з дисципліни
«Аналіз та рефакторинґ коду»
на тему: «Правила оформлення програмного коду
на мові JavaScript згідно з Google JavaScript Style Guide»






Виконав:                                                                                                  Перевірив:
ст. гр. ПЗПІ-23-6                       				ст. викладач катедри ПІ
Дубіна Станіслав Геннадійович		                    Сокорчук Ігор Петрович







Харків 2025
1 ІСТОРІЯ ЗМІН 

№ДатаВерсія звітуОпис змін та виправлень126.10.20251Створено звіт


2 ЗАВДАННЯ

     Дослідити та проаналізувати офіційні стандарти оформлення програмного коду для обраної мови програмування, а також продемонструвати їхнє практичне застосування на конкретних прикладах кодування.
     Студент повинен вивчити офіційні coding conventions та style guides обраної мови програмування, визначити ключові аспекти оформлення коду, включаючи правила іменування для пакетів, класів, функцій, змінних та констант, принципи форматування (індентація, розташування дужок, пробілування), структуру та організацію класів та модулів, ідіоматичні конструкції мови, а також рекомендації для написання читабельного та підтримуваного коду.
     Для кожного стандарту оформлення необхідно розробити наочні приклади коду, які демонструватимуть як коректне, так і некоректне застосування правила, з детальними поясненнями щодо важливості дотримання кожного стандарту.
     На основі проведеного дослідження студент має розробити презентацію українською мовою з мінімум 10 слайдів. Вступна частина повинна містити огляд обраної мови програмування, її історію розвитку та область застосування. Основна частина передбачає детальний розгляд конкретних стандартів оформлення з прикладами коду. Висновкова частина повинна включати аналіз важливості дотримання стандартів та їхнього впливу на якість коду. Презентація повинна бути структурованою, наочною та логічно послідовною.
     Студент повинен завантажити презентацію на навчальну платформу dl.nure.ua та розмістити приклади коду у репозиторії на GitHub з детальною документацією.	

3 ОПИС ВИКОНАНОЇ РОБОТИ
     3.1 Вибір мови програмування та джерел
     Для виконання практичної роботи обрано мову програмування JavaScript – сучасну мову програмування для веб-розробки та серверної частини, розроблену Brendan Eich у 1995 році, що стала стандартом для розробки інтерактивних веб-застосунків та є офіційною мовою для фронтенд-розробки з 1997 року (стандарт ECMAScript). 
     3.2 Назви зміних
     Назви змінних, функцій, класів, констант та всіх інших ідентифікаторів повинні чітко описувати їх призначення. Дотримуйтесь усталених конвенцій JavaScript, вживаючи camelCase для змінних і функцій, PascalCase для класів та UPPER_SNAKE_CASE для констант.
     
1  // Код неясний - потребує коментарів
2  const gUD = (uid) => {
3    const uD = fetch(`/api/u/${uid}`);
4    return uD;
5  };
6  
7  let x = 10;
8  let y = getX() + 5;
9  const n = ["John", "Jane", "Bob"];
10 
11 const proc = (d) => {
12   return d.map(i => i * 2);
13 };
14 
15 // Код самодокументується
16 const getUserData = (userId) => {
17   const userData = fetch(`/api/users/${userId}`);
18   return userData;
19 };
20 
21 let userCount = 10;
22 let totalScore = getBaseScore() + 5;
23 const userNames = ["John", "Jane", "Bob"];
24 
25 const processNumbers = (data) => {
26   return data.map(number => number * 2);
27 }; 
     3.3 Розташування фігурних дужок
     Розташування фігурних дужок впливає на читабельність та структурованість коду. Дотримуйтесь єдиного стилю розташування дужок, розташовуючи відкриваючу дужку на тому ж рядку, що й оголошення функції чи умова. Закриваюча дужка повинна бути на окремому рядку на рівні структури, яку вона закриває. Послідовне розташування дужок попереджує синтаксичні помилки, спричинені автоматичною вставкою крапки з комою, та робить код одноманітним у всьому проєкті. Це також полегшує навігацію по коду та швидше дозволяє розпізнати блоки логіки.
     
1  // Погано (дужка на новому рядку)
2  function getUserName(id)
3  {
4    if (id > 0)
5    {
6      return "User";
7    }
8    else
9    {
10     return "Guest";
11   }
12 }
13
14 const handler = () =>
15 {
16   console.log("Event fired");
17 };
18
19 // Добре (дужка на тому ж рядку)
20 function getUserName(id) {
21   if (id > 0) {
22     return "User";
23   } else {
24     return "Guest";
25   }
26 }
27
28 const handler = () => {
29   console.log("Event fired");
30 };
     3.4 Довжина рядків
     Довжина рядків безпосередньо впливає на читабельність коду. Обмежуйте довжину рядків до 80-100 символів, щоб уникнути горизонтального прокручування та полегшити читання на різних пристроях та редакторах. Це дозволяє розробникам бачити весь рядок без необхідності гортати горизонтально. Розбиття довгих рядків на кілька коротших робить код більш структурованим, легшим для огляду під час code review та зручнішим для роботи в середовищах з обмеженою шириною екрана. Також це сприяє кращій организації коду та виявленню логічних груп інструкцій.
     
1  // Погано (дуже довгі рядки)
2  const user = { name: "John", email: "john@example.com", phone: "123-456-7890", address: "123 Main St", city: "New York" };
3  
4  const result = userService.getUserById(userId).then(user => user.data).catch(error => console.error("Error:", error)).finally(() => console.log("Done"));
5  
6  const config = { apiUrl: "https://api.example.com", timeout: 5000, retries: 3, headers: { "Content-Type": "application/json", "Authorization": "Bearer token" } };
7  
8  // Добре (оптимальна довжина рядків)
9  const user = {
10   name: "John",
11   email: "john@example.com",
12   phone: "123-456-7890",
13   address: "123 Main St",
14   city: "New York"
15 };
16
17 const result = userService
18   .getUserById(userId)
19   .then(user => user.data)
20   .catch(error => console.error("Error:", error))
21   .finally(() => console.log("Done"));
22
23 const config = {
24   apiUrl: "https://api.example.com",
25   timeout: 5000,
26   retries: 3,
27   headers: {
28     "Content-Type": "application/json",
29     "Authorization": "Bearer token"
30   }
31 };
     3.5 Вибір типу змінної
     Використовуйте const за замовчуванням для всіх змінних, які не будуть перевизначені. Вживайте let для змінних, значення яких змінюються в межах блоку коду. Ніколи не вживайте var, оскільки він має непередбачувану поведінку з функціональним областю видимості та может призвести до непорозумінь. Послідовне використання const та let робить код безпечнішим, запобігаючи випадковим переприсвоєнням та редукуючи кількість ошибок. Це також делает намір розробника явним — показує, яка змінна буде змінюватися, а яка ні, що значно поліпшує читабельність та підтримку коду.
     
1  // Погано (var та непотрібні переписування)
2  var name = "John";
3  var count = 0;
4  count = count + 1;
5  var total = 100;
6  
7  for (var i = 0; i < 10; i++) {
8    setTimeout(() => console.log(i), 1000);
9  }
10 // Виведе 10, 10, 10... замість 0, 1, 2...
11
12 // Добре (const та let)
13 const name = "John";
14 let count = 0;
15 count = count + 1;
16 const total = 100;
17
18 for (let i = 0; i < 10; i++) {
19   setTimeout(() => console.log(i), 1000);
20 }
21 // Виведе 0, 1, 2... як передбачено
     3.6 Функції з однією відповідальністю
     Кожна функція повинна виконувати одне завдання та виконувати його добре. Функція повинна мати одну чітко визначену мету та відповідальність. Не змішуйте різні аспекти функціональності в одній функції, такі як валідація, обробка даних, збереження та сповіщення. Це робить код більш модульним, тестованим та легшим для підтримки.
     
1  // Погано (функція робить занадто багато)
2  function processUser(user) {
3    if (!user.name || !user.email) {
4      console.error("Invalid user");
5      return false;
6    }
7    const result = database.save(user);
8    email.send(user.email, "Welcome!");
9    logger.info("User processed: " + user.name);
10   cache.update("users", user);
11   return result;
12 }
13
14 // Добре (кожна функція має одну мету)
15 function isValidUser(user) {
16   return user.name && user.email;
17 }
18
19 function saveUser(user) {
20   return database.save(user);
21 }
22
23 function notifyUser(user) {
24   return email.send(user.email, "Welcome!");
25 }
26
27 function logUserAction(user) {
28   logger.info("User processed: " + user.name);
29 }
30
31 function updateUserCache(user) {
32   cache.update("users", user);
33 }
34
35 function processUser(user) {
36   if (!isValidUser(user)) return false;
37   
38   saveUser(user);
39   notifyUser(user);
40   logUserAction(user);
41   updateUserCache(user);
42   return true;
43 }
     3.7 Інструменти для чистого коду в JavaScript
     Спеціалізовані інструменти автоматизують підтримку чистого коду, забезпечуючи консистентність та виявляючи проблеми.
     ESLint – аналізує код на помилки та дотримання правил стилю, виявляючи уразливості до запуску.
     Prettier – автоматично форматує код згідно з правилами, забезпечуючи єдиний стиль по всьому проєкту.
     SonarQube – платформа для аналізу якості коду, виявляючи "code smells", вразливості та технічний борг.
     VS Code extensions – розширення редактора для глибокої інтеграції лінтерів, форматувальників та інших інструментів.

ВИСНОВКИ

   У результаті виконання практичної роботи було розглянуто офіційні Google JavaScript Style Guide, що визначають стандарти оформлення програмного коду для мови JavaScript. Досліджено ключові аспекти conventions: правила іменування змінних та функцій з використанням lowerCamelCase, що забезпечують зрозумілість та самодокументованість коду; принципи розташування фігурних дужок на тому ж рядку, що попереджують синтаксичні помилки; рекомендації щодо оптимальної довжини рядків (80-100 символів) для комфортного читання; вибір типу змінної (const за замовчуванням, потім let), що запобігає непередбачуваній поведінці; принцип єдиної відповідальності функцій, що робить код модульним та тестованим.
   Практична робота показала, що послідовне дотримання офіційних стандартів оформлення коду та використання інструментів автоматизації (ESLint, Prettier) є необхідною умовою для професійної розробки програмного забезпечення. Впровадження цих практик дозволяє створювати якісніший, надійніший та більш масштабований код, що полегшує розуміння, підтримку та командну взаємодію.

ВИКОРИСТАНІ ДЖЕРЕЛА

1. Martin Fowler — Refactoring: Improving the Design of Existing Code. URL:  https://martinfowler.com/books/refactoring.htmll (дата звернення: 26.10.2025).
2. Robert C. Martin — Clean Code: A Handbook of Agile Software Craftsmanship. URL: https://github.com/Gatjuat-Wicteat-Riek/clean-code-book (дата звернення: 26.10.2025).
3. MDN JavaScript Style Guide. URL: https://developer.mozilla.org/en-US/docs/Glossary/JavaScript (дата звернення: 26.10.2025).
4. Офіційна документація ESLint. URL: https://eslint.org/ (дата звернення: 26.10.2025). 
5. Офіційна документація Prettier. URL: https://prettier.io/ (дата звернення: 26.10.2025). 
 

ДОДАТОК А
Відеозапис

Відеозапис доповіді: https://youtu.be/ucoU3KNdO7I 

Хронологічний опис відеозапису:


ДОДАТОК Б
Слайди презентації

Рисунок Б.1 – Титульний слайд презентації

 
Рисунок Б.2 – Вступ

 
Рисунок Б.3 – Пояснення чому стиль коду важливий

 
Рисунок Б.4 – Основні принципи чистого коду


 
Рисунок Б.5 – Правило: Назви змінних

 
Рисунок Б.6 – Правило: Розташування фігурних дужок

 
Рисунок Б.7 – Правило: Довжина рядків

 
Рисунок Б.8 – Правило: Вибір типу змінної

 
Рисунок Б.9 – Правило: Функції з однією відповідальністю

 
Рисунок Б.10 – Інструменти для чистого коду в JavaScript

 
Рисунок Б.11 – Висновки

 
	Рисунок Б.12 – Посилання / Джерела


2


